@using Demos.Sf.Services
@using Demos.Sf.Models

<div class="activity_view">
    <button class="drag_button">
        @if (collapsedEvent)
        {
            <svg width="50" height="6" viewBox="0 0 50 6" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="50" height="6" rx="3" fill="#C2C5C7" />
            </svg>
        }
        else
        {
            <svg width="50" height="12" viewBox="0 0 50 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0 3.70012C0 1.81364 1.76356 0.423255 3.59795 0.863508L21.0223 5.04534C23.637 5.67287 26.363 5.67287 28.9777 5.04534L46.4021 0.863508C48.2364 0.423255 50 1.81364 50 3.70012C50 5.04898 49.0752 6.22194 47.7636 6.53673L30.8343 10.5998C26.9992 11.5202 23.0008 11.5202 19.1657 10.5998L2.23638 6.53673C0.924763 6.22194 0 5.04898 0 3.70012Z" fill="#C2C5C7" />
            </svg>
        }
    </button>
    <p class="view_title">@SelectedDate.ToString("MMMM, dd")</p>
    @foreach (var group in GetEvents())
    {
        <p class="start_day">@group.name</p>
        <div class="event">
            @foreach (var app in group.events)
            {
                <div class="event_container">
                    <div class="circle"></div>
                    @* <p class="date">@appointment.StartTime.ToString("hh:mm tt")</p> *@
                    <p class="date">@app.date.ToString("hh:mm tt")</p>
                    <div class="subject_container">
                        <p class="subject">@app.name</p>
                    </div>
                    <p class="room">Room 01</p>
                </div>
            }           
        </div>
    } 
</div>


@code {
    public bool collapsedEvent { get; set; } = true;

    [Parameter]
    public DateTime SelectedDate { get; set; }

    [Parameter]
    public List<Appointment> Appointments { get; set; }


    public List<(string name, List<(string name, DateTime date)> events)> GetEvents()
    {
        var endTime = SelectedDate.Date.AddHours(23).AddMinutes(59).AddSeconds(59);
        return Appointments
            .Where(x => x.StartTime>= SelectedDate && x.StartTime <= endTime)
            .GroupBy(x => x.StartTime.Hour)
            .Select(grp => (name: SelectedDate.AddHours(grp.Key).ToString("hh:mm tt"), events: grp.Select(e => (name: e.Subject, e.StartTime)).ToList()))
            .ToList();
    }




}