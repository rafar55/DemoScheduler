@using Demos.Sf.Models
@using Demos.Sf.Services
@using System.Globalization;


<style>
    .month-day-header {
        width: 100%;
        height: 100%;
        margin: auto auto;
        padding: 2px 4px;
    }

        .month-day-header span.currentdate {
            background-color: #48629D;
            border-radius: 50%;
            color: white;
            padding: 4px;
        }

        .month-day-header span {
            top: 50%;
        }

    .holiday {
        background-color: #5E676D;
        color: white;
    }

    .e-schedule .e-month-view .e-date-header {
        margin: 0;
        width: 100%;
        text-align: unset;
        padding: 0;
    }

    .e-schedule .e-month-view .e-current-date .e-date-header {
        width: 100%;
        border-radius: unset;
        background-color: unset;
        color: unset;
    }


    .e-schedule .e-vertical-view .e-header-cells {
        padding: 0px;
    }

    .header-template {
        margin: 0;
        height: 100%;
    }

        .header-template .day-block {
            margin-bottom: 12px;
            padding: 4px 12px 0px 12px;
        }

        .header-template .info-block {
            padding: 0px 12px 4px 12px;
            display: flex;
            justify-content: space-between;
        }

    .e-appointment {
        background: none !important;
        border: unset !important;
        border-radius: unset !important;
        color: unset !important;
        display: flex;
        padding: 0 !important;
        margin: 0 !important;
    }


        .e-appointment .custom-event {
            width: 100%;
            height: 100%;
            background: #e2e6ef !important;
            border: unset !important;
            border-left: 6px solid #48629d !important;
            border-radius: unset !important;
            color: #48629d !important;
            overflow-x: hidden;
            text-overflow: ellipsis;
            display: flex;
            align-items: center;
            padding-left: 2px;
        }

        .e-appointment .e-appointment-details {
            flex: unset !important;
            padding: 0 !important;
            width: 100%;
        }

        .e-appointment .custom-event img {
            margin-right: 4px;
        }

        .e-appointment .custom-event span {
            overflow-x: hidden;
            text-overflow: ellipsis;
        }

        .e-appointment .astro-time-midday {
            background-color: rgba(19, 184, 135, 0.16) !important;
            border-left: 6px solid #13B887 !important;
            color: #13B887;
        }

        .e-appointment .astro-time-sunrise {
            background-color: rgba(21, 170, 191, 0.16) !important;
            border-left: 6px solid #15AABF !important;
            color: #15AABF;
        }

        .e-appointment .astro-time-sunset {
            background-color: rgba(229, 72, 128, 0.16) !important;
            border-left: 6px solid #E54880 !important;
            color: #E54880;
        }
</style>


<div class="schedule-container">

    <SfSchedule TValue="Appointment" WorkDays="@_workDays" AllowDragAndDrop="false" AllowResizing="false" Width="100%" Height="100%" ShowHeaderBar="false" @bind-SelectedDate="@SelectedDate" @bind-CurrentView="@CurrentView">
        <ScheduleEvents TValue="Appointment"></ScheduleEvents>
        <ScheduleWorkHours Highlight="true" Start="00:00" End="11:59"></ScheduleWorkHours>
        <ScheduleTemplates>
            <DateHeaderTemplate Context="template">
                @{ var holiday = GetHoliday(template.Date);}
                <div class="header-template">
                    <div class="day-block @((holiday != null ? "holiday" : ""))">@($"{template.Date:ddd}.")</div>
                    <div class="info-block">
                        <span>@template.Date.ToString("dd")</span>
                        <span>@holiday?.Name</span>
                    </div>
                </div>
            </DateHeaderTemplate>
        </ScheduleTemplates>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week"></ScheduleView>
            <ScheduleView Option="View.Month" MaxEventsPerRow="5">
                <CellHeaderTemplate Context="template">
                    @{ var holiday = GetHoliday(template.Date); }
                    <div class="month-day-header @(holiday != null ? "holiday": "")">
                        <span class="@(template.Date == DateTime.Now.Date ? "currentdate" : "")">@template.Date.Day</span>
                        <span>@holiday?.Name</span>
                    </div>
                </CellHeaderTemplate>

                <EventTemplate>
                    @{
                        var appointment = (context as Appointment);
                        <MediaQuery Media="@Breakpoints.SmallDown">
                            <Matched>
                                <div class="event_conteiner">
                                    <div class="circle"></div>
                                    <p class="date">@appointment.StartTime.ToString("hh:mm tt")</p>
                                    <div class="subject_container">
                                        <p class="subject">@appointment.Subject</p>
                                    </div>
                                    <p class="room">Room 00</p>
                                </div>
                                <div>
                                    <svg width="16" height="10" viewBox="0 0 16 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M4.97317 1.11587L3.8712 0.199951L0 4.86543L3.8712 9.5309L4.97317 8.61498L1.86047 4.86543L4.97317 1.11587ZM4.42218 5.58099H5.85331V4.14986H4.42218V5.58099ZM11.5778 4.14986H10.1467V5.58099H11.5778V4.14986ZM7.28444 5.58099L8.71556 5.58099V4.14986H7.28444V5.58099ZM12.1288 0.199951L11.0268 1.11587L14.1395 4.86543L11.0268 8.61498L12.1288 9.5309L16 4.86543L12.1288 0.199951Z" fill="#15AABF" />
                                    </svg>
                                    <p class="caption">Run on Weekday</p>
                                </div>
                            </Matched>
                            <Unmatched>
                                <div class="circle"></div>
                                <div class="subject_container">
                                    <p class="subject">@appointment.Subject</p>
                                </div>
                                <p class="date">@appointment.StartTime.ToString("hh:mm tt")</p>
                            </Unmatched>
                        </MediaQuery>
                    }
                </EventTemplate>
            </ScheduleView>
        </ScheduleViews>

        <ScheduleTimeScale Enable="true" Interval="60" SlotCount="4"></ScheduleTimeScale>

        <ScheduleEventSettings DataSource="AppointmentsData">
            <Template>
                @{
                    var appointment = (context as Appointment);
                    var data = GetDataForAstroTime(appointment.StartTime.Hour, appointment.StartTime);
                    <div class="custom-event @(data.HasValue ? $"astro-time-{data.Value.label}" : "")">
                        @if (data.HasValue)
                        {
                            <img src="@($"images/{data.Value.label}.svg")" />
                        }
                        <span>@(data.HasValue ? $"At {data.Value.label}" : appointment.Subject) </span>
                    </div>
                }
            </Template>
        </ScheduleEventSettings>
    </SfSchedule>
</div>


@code {

    private int[] _workDays = new int[] { 0, 1, 2, 3, 4, 5, 6, 7 };


    [Parameter]
    public DateTime SelectedDate { get; set; }
    [Parameter]
    public View CurrentView { get; set; } = View.Month;

    [Parameter]
    public List<Appointment> AppointmentsData { get; set; }

    [Parameter]
    public List<Holiday> Holidays { get; set; }


    public (string label, TimeSpan difference)? GetDataForAstroTime(int hour, DateTime eventDate)
    {
        var difference = eventDate.Subtract(new DateTime(eventDate.Year, eventDate.Month, eventDate.Day, eventDate.Hour, 0, 0));
        return (hour) switch
        {
            6 => ("sunrise", difference),
            12 => ("midday", difference),
            18 => ("sunset", difference),
            _ => null
        };
    }



    public Holiday GetHoliday(DateTime currentDate)
    {
        if (Holidays == null) return null;
        return Holidays.SingleOrDefault(x => x.Day == currentDate.Day && x.Month == currentDate.Month);
    }


}