@using Demos.Sf.Models
@using Demos.Sf.Services
@using System.Globalization;


<style>
    .month-day-header {
        width: 100%;
        height: 100%;
        margin: auto auto;
        padding: 2px 4px;
       
    }

        .month-day-header span.currentdate {
            background-color: #48629D;
            border-radius: 50%;
            color: white;
            padding: 4px;
        }

        .month-day-header span {
            top: 50%;
        }

    .holiday {
        background-color: #5E676D;
        color: white;
    }

    .e-schedule .e-month-view .e-date-header {
        margin: 0;
        width: 100%;
        text-align: unset;
        padding: 0;
      
    }

    .e-schedule .e-month-view .e-current-date .e-date-header {
        width: 100%;
        border-radius: unset;
        background-color: unset;
        color: unset;
    }


    .e-schedule .e-month-view .e-work-cells {
        padding: 0px;
    }
</style>


<div class="schedule-container">

    <SfSchedule TValue="Appointment" WorkDays="@_workDays" AllowDragAndDrop="false" AllowResizing="false" Width="100%" Height="100%" ShowHeaderBar="false" @bind-SelectedDate="@SelectedDate" @bind-CurrentView="@CurrentView">
        <ScheduleEvents TValue="Appointment"></ScheduleEvents>
        <ScheduleWorkHours Highlight="true" Start="00:00" End="11:59"></ScheduleWorkHours>
        <ScheduleViews>
            <ScheduleView Option="View.Day">
                <EventTemplate>
                    @{
                        var appointment = (context as Appointment);
                        <div class="custom-event">
                            @appointment.Subject
                        </div>
                    }
                </EventTemplate>
            </ScheduleView>
            <ScheduleView Option="View.Week">
                <EventTemplate>
                    @{
                        var appointment = (context as Appointment);
                        <div class="custom-event @(appointment.StartTime.Hour == 12 ? "astro-time" : "")">
                            @if (appointment.StartTime.Hour == 12)
                            {
                                <img src="images/midday.svg" />
                            }
                            @appointment.Subject
                        </div>
                    }
                </EventTemplate>
            </ScheduleView>
            <ScheduleView Option="View.Month" MaxEventsPerRow="5">
                <CellHeaderTemplate Context="template">
                    @{ var holiday = GetHoliday(template.Date); }
                    <div class="month-day-header @(holiday != null ? "holiday": "")">
                        <span class="@(template.Date == DateTime.Now.Date ? "currentdate" : "")" >@template.Date.Day</span>
                        <span>@holiday?.Name</span>
                    </div>
                </CellHeaderTemplate>

                <EventTemplate>
                    @{
                        var appointment = (context as Appointment);
                        <MediaQuery Media="@Breakpoints.SmallDown">
                            <Matched>
                                <div class="event_conteiner">
                                    <div class="circle"></div>
                                    <p class="date">@appointment.StartTime.ToString("hh:mm tt")</p>
                                    <div class="subject_container">
                                        <p class="subject">@appointment.Subject</p>
                                    </div>
                                    <p class="room">Room 00</p>
                                </div>
                                <div>
                                    <svg width="16" height="10" viewBox="0 0 16 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M4.97317 1.11587L3.8712 0.199951L0 4.86543L3.8712 9.5309L4.97317 8.61498L1.86047 4.86543L4.97317 1.11587ZM4.42218 5.58099H5.85331V4.14986H4.42218V5.58099ZM11.5778 4.14986H10.1467V5.58099H11.5778V4.14986ZM7.28444 5.58099L8.71556 5.58099V4.14986H7.28444V5.58099ZM12.1288 0.199951L11.0268 1.11587L14.1395 4.86543L11.0268 8.61498L12.1288 9.5309L16 4.86543L12.1288 0.199951Z" fill="#15AABF" />
                                    </svg>
                                    <p class="caption">Run on Weekday</p>
                                </div>
                            </Matched>
                            <Unmatched>
                                <div class="circle"></div>
                                <div class="subject_container">
                                    <p class="subject">@appointment.Subject</p>
                                </div>
                                <p class="date">@appointment.StartTime.ToString("hh:mm tt")</p>
                            </Unmatched>
                        </MediaQuery>
                    }
                </EventTemplate>
            </ScheduleView>
        </ScheduleViews>

        <ScheduleTimeScale Enable="true" Interval="60" SlotCount="4"></ScheduleTimeScale>

        <ScheduleEventSettings DataSource="AppointmentsData"></ScheduleEventSettings>
    </SfSchedule>
</div>


@code {

    private int[] _workDays = new int[] { 0, 1, 2, 3, 4, 5, 6, 7 };


    [Parameter]
    public DateTime SelectedDate { get; set; }
    [Parameter]
    public View CurrentView { get; set; } = View.Month;

    [Parameter]
    public List<Appointment> AppointmentsData { get; set; }

    [Parameter]
    public List<Holiday> Holidays { get; set; }




    public Holiday GetHoliday(DateTime currentDate)
    {
        if (Holidays == null) return null;
        return Holidays.SingleOrDefault(x => x.Day == currentDate.Day && x.Month == currentDate.Month);
    }


}